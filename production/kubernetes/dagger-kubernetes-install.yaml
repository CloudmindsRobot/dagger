apiVersion: v1
data:
  dagger.ini: |
    [global]
    debug = false
    ; 邮件接收者，仅当未开启用户注册时生效
    to = 
    alert_enabled = false

    [users]
    ; 允许注册
    allow_sign_up = false
    admin_username = admin
    admin_passwod = admin

    [db]
    address = root:123456@tcp(dagger-mysql:3306)/log?charset=utf8&parseTime=True&loc=Local

    [loki]
    address = 

    [ldap]
    enabled = false
    ldap_host = 172.1.1.1
    ldap_port = 389
    ldap_base_dn = 
    ldap_bind_username = 
    ldap_bind_password = 
    ldap_username_key = uid
    ldap_mail_key = mail

    [alertmanager]
    enabled = true
    address = http://127.0.0.1:9093
    smtp_from = 
    smtp_smarthost = 
    smtp_smartport = 25
    smtp_auth_username = 
    smtp_auth_password =
kind: ConfigMap
metadata:
  name: dagger-conf

---
apiVersion: v1
data:
  init.sql: |
    # ************************************************************
    # Sequel Pro SQL dump
    # Version 4541
    #
    # http://www.sequelpro.com/
    # https://github.com/sequelpro/sequelpro
    #
    # Host: 10.12.32.179 (MySQL 5.6.46)
    # Database: log
    # Generation Time: 2021-01-20 01:54:06 +0000
    # ************************************************************


    /*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
    /*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
    /*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
    /*!40101 SET NAMES utf8 */;
    /*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
    /*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
    /*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

    CREATE DATABASE IF NOT EXISTS log DEFAULT CHARACTER SET = utf8mb4;

    # Dump of table auth_user
    # ------------------------------------------------------------

    DROP TABLE IF EXISTS `auth_user`;

    CREATE TABLE `auth_user` (
      `id` bigint(20) NOT NULL AUTO_INCREMENT,
      `is_superuser` tinyint(4) NOT NULL DEFAULT '0',
      `is_active` tinyint(4) NOT NULL DEFAULT '1',
      `username` varchar(128) NOT NULL,
      `password` varchar(256) DEFAULT NULL,
      `mobile` varchar(32) DEFAULT NULL,
      `email` varchar(128) DEFAULT NULL,
      `create_at` datetime NOT NULL,
      `last_login_at` datetime NOT NULL,
      PRIMARY KEY (`id`)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;



    # Dump of table log_event
    # ------------------------------------------------------------

    DROP TABLE IF EXISTS `log_event`;

    CREATE TABLE `log_event` (
      `id` bigint(20) NOT NULL AUTO_INCREMENT,
      `resolve_at` datetime DEFAULT NULL,
      `create_at` datetime DEFAULT NULL,
      `rule_id` bigint(20) DEFAULT NULL,
      `status` varchar(24) NOT NULL,
      `count` int(11) DEFAULT NULL,
      PRIMARY KEY (`id`),
      KEY `idx_log_event_rule_id` (`rule_id`),
      CONSTRAINT `fk_log_event_log_rule` FOREIGN KEY (`rule_id`) REFERENCES `log_rule` (`id`)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;



    # Dump of table log_event_detail
    # ------------------------------------------------------------

    DROP TABLE IF EXISTS `log_event_detail`;

    CREATE TABLE `log_event_detail` (
      `id` bigint(20) NOT NULL AUTO_INCREMENT,
      `starts_at` datetime DEFAULT NULL,
      `summary` varchar(512) DEFAULT NULL,
      `labels` longtext,
      `description` longtext NOT NULL,
      `rule_id` bigint(20) DEFAULT NULL,
      `event_id` bigint(20) DEFAULT NULL,
      `level` varchar(32) DEFAULT NULL,
      PRIMARY KEY (`id`),
      KEY `idx_log_event_detail_starts_at` (`starts_at`),
      KEY `idx_log_event_detail_rule_id` (`rule_id`),
      KEY `idx_log_event_detail_event_id` (`event_id`),
      CONSTRAINT `fk_log_event_detail_log_event` FOREIGN KEY (`event_id`) REFERENCES `log_event` (`id`),
      CONSTRAINT `fk_log_event_detail_log_rule` FOREIGN KEY (`rule_id`) REFERENCES `log_rule` (`id`),
      CONSTRAINT `fk_log_event_details` FOREIGN KEY (`event_id`) REFERENCES `log_event` (`id`)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;



    # Dump of table log_group
    # ------------------------------------------------------------

    DROP TABLE IF EXISTS `log_group`;

    CREATE TABLE `log_group` (
      `id` bigint(20) NOT NULL AUTO_INCREMENT,
      `group_id` bigint(20) DEFAULT NULL,
      `rule_id` bigint(20) DEFAULT NULL,
      PRIMARY KEY (`id`),
      KEY `idx_log_group_log_user_group_id` (`group_id`),
      KEY `idx_log_group_rule_id` (`rule_id`),
      CONSTRAINT `fk_log_group_log_rule` FOREIGN KEY (`rule_id`) REFERENCES `log_rule` (`id`),
      CONSTRAINT `fk_log_group_log_user_group` FOREIGN KEY (`group_id`) REFERENCES `log_user_group` (`id`),
      CONSTRAINT `fk_log_rule_groups` FOREIGN KEY (`rule_id`) REFERENCES `log_rule` (`id`),
      CONSTRAINT `fk_log_user_group_groups` FOREIGN KEY (`group_id`) REFERENCES `log_user_group` (`id`)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;



    # Dump of table log_history
    # ------------------------------------------------------------

    DROP TABLE IF EXISTS `log_history`;

    CREATE TABLE `log_history` (
      `id` bigint(20) NOT NULL AUTO_INCREMENT,
      `label_json` longtext,
      `create_at` datetime DEFAULT NULL,
      `filter_json` longtext,
      `user_id` bigint(20) DEFAULT NULL,
      `log_ql` varchar(1024) DEFAULT NULL,
      PRIMARY KEY (`id`),
      KEY `idx_log_history_user_id` (`user_id`),
      CONSTRAINT `fk_log_history_user` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;



    # Dump of table log_label
    # ------------------------------------------------------------

    DROP TABLE IF EXISTS `log_label`;

    CREATE TABLE `log_label` (
      `id` bigint(20) NOT NULL AUTO_INCREMENT,
      `key` varchar(128) DEFAULT NULL,
      `value` varchar(128) DEFAULT NULL,
      `rule_id` bigint(20) DEFAULT NULL,
      PRIMARY KEY (`id`),
      KEY `idx_log_label_rule_id` (`rule_id`),
      CONSTRAINT `fk_log_label_log_rule` FOREIGN KEY (`rule_id`) REFERENCES `log_rule` (`id`),
      CONSTRAINT `fk_log_rule_labels` FOREIGN KEY (`rule_id`) REFERENCES `log_rule` (`id`)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;



    # Dump of table log_rule
    # ------------------------------------------------------------

    DROP TABLE IF EXISTS `log_rule`;

    CREATE TABLE `log_rule` (
      `id` bigint(20) NOT NULL AUTO_INCREMENT,
      `create_at` datetime DEFAULT NULL,
      `key` varchar(128) NOT NULL,
      `name` varchar(64) DEFAULT NULL,
      `description` varchar(2056) DEFAULT NULL,
      `summary` varchar(2056) DEFAULT NULL,
      `log_ql` varchar(512) DEFAULT NULL,
      `user_id` bigint(20) DEFAULT NULL,
      `update_at` datetime DEFAULT NULL,
      `level` varchar(32) DEFAULT NULL,
      PRIMARY KEY (`id`),
      UNIQUE KEY `key` (`key`),
      KEY `idx_log_rule_user_id` (`user_id`),
      CONSTRAINT `fk_log_rule_user` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;



    # Dump of table log_snapshot
    # ------------------------------------------------------------

    DROP TABLE IF EXISTS `log_snapshot`;

    CREATE TABLE `log_snapshot` (
      `id` bigint(20) NOT NULL AUTO_INCREMENT,
      `name` varchar(128) NOT NULL,
      `count` int(11) DEFAULT NULL,
      `create_at` datetime DEFAULT NULL,
      `download_url` varchar(512) DEFAULT NULL,
      `user_id` bigint(20) DEFAULT NULL,
      `start_time` datetime DEFAULT NULL,
      `end_time` datetime DEFAULT NULL,
      `dir` varchar(128) DEFAULT NULL,
      PRIMARY KEY (`id`),
      KEY `idx_log_snapshot_user_id` (`user_id`),
      CONSTRAINT `fk_log_snapshot_user` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;



    # Dump of table log_user
    # ------------------------------------------------------------

    DROP TABLE IF EXISTS `log_user`;

    CREATE TABLE `log_user` (
      `id` bigint(20) NOT NULL AUTO_INCREMENT,
      `group_id` bigint(20) DEFAULT NULL,
      `user_id` bigint(20) DEFAULT NULL,
      PRIMARY KEY (`id`),
      KEY `idx_log_user_log_user_group_id` (`group_id`),
      KEY `idx_log_user_user_id` (`user_id`),
      CONSTRAINT `fk_log_user_group_users` FOREIGN KEY (`group_id`) REFERENCES `log_user_group` (`id`),
      CONSTRAINT `fk_log_user_log_user_group` FOREIGN KEY (`group_id`) REFERENCES `log_user_group` (`id`),
      CONSTRAINT `fk_log_user_user` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;



    # Dump of table log_user_group
    # ------------------------------------------------------------

    DROP TABLE IF EXISTS `log_user_group`;

    CREATE TABLE `log_user_group` (
      `id` bigint(20) NOT NULL AUTO_INCREMENT,
      `create_at` datetime DEFAULT NULL,
      `group_name` varchar(64) DEFAULT NULL,
      `user_id` bigint(20) DEFAULT NULL,
      PRIMARY KEY (`id`),
      KEY `idx_log_user_group_user_id` (`user_id`),
      CONSTRAINT `fk_log_user_group_user` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;




    /*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
    /*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
    /*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
    /*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
    /*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
    /*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;

    USE log;

    INSERT INTO `auth_user` (`is_superuser`, `is_active`, `username`, `password`, `mobile`, `email`, `create_at`, `last_login_at`)
    VALUES (1, 1, 'admin',  '$2a$10$zqlCha8VIdeXeixuwFDlAerOFaimREojlZdDfqhPn3dwYbdD9T8n6', NULL, NULL, now(), now());
kind: ConfigMap
metadata:
  name: dagger-mysql-init

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: dagger-service
    dagger.backend: sqlite
  name: sqlite-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: dagger-service
    dagger.backend: static
  name: static-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: dagger-service
    dagger.alertmanager: conf
  name: alertmanager-conf
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: dagger-mysql
    dagger.mysql: mysql
  name: mysql-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: dagger-backend
  name: dagger-backend
spec:
  ports:
    - name: "8000"
      port: 8000
      targetPort: 8000
  selector:
    app: dagger-backend
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: dagger-ui
  name: dagger-ui
spec:
  ports:
    - name: "8080"
      port: 8080
      targetPort: 8080
  selector:
    app: dagger-ui

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: dagger-alertmanager
  name: dagger-alertmanager
spec:
  ports:
    - name: "9093"
      port: 9093
      targetPort: 9093
  selector:
    app: dagger-alertmanager

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: dagger-mysql
  name: dagger-mysql
spec:
  ports:
    - name: "3306"
      port: 3306
      targetPort: 3306
  selector:
    app: dagger-mysql

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: dagger-backend
  name: dagger-backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dagger-backend
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: dagger-backend
    spec:
      containers:
        - args:
            - sh
            - -c
            - ./dagger
          image: quay.io/cloudminds/dagger-backend:latest
          name: dagger-backend
          env:
            - name: LOKI_SERVER
              # your loki service endpoint
              value: http://<LOKI_ENDPOINT>:3100
          ports:
            - containerPort: 8000
          resources:
            limits:
              cpu: "2"
              memory: 4Gi
            requests:
              cpu: 500m
              memory: 256Mi
          volumeMounts:
            - mountPath: /usr/src/app/static
              name: static-data
            - mountPath: /usr/src/app/db
              name: sqlite-data
            - mountPath: /etc/dagger
              name: dagger-conf
            - mountPath: /usr/src/app/conf
              name: alertmanager-conf
      restartPolicy: Always
      volumes:
        - name: static-data
          persistentVolumeClaim:
            claimName: static-data
        - name: sqlite-data
          persistentVolumeClaim:
            claimName: sqlite-data
        - name: alertmanager-conf
          persistentVolumeClaim:
            claimName: alertmanager-conf
        - name: dagger-conf
          configMap:
            defaultMode: 420
            name: dagger-conf

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: dagger-ui
  name: dagger-ui
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dagger-ui
  template:
    metadata:
      labels:
        app: dagger-ui
    spec:
      containers:
        - image: quay.io/cloudminds/dagger-ui:latest
          name: dagger-ui
          ports:
            - containerPort: 8080
          resources:
            limits:
              cpu: "2"
              memory: 4Gi
            requests:
              cpu: 500m
              memory: 256Mi
      restartPolicy: Always

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: dagger-alertmanager
  name: dagger-alertmanager
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dagger-alertmanager
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: dagger-alertmanager
    spec:
      containers:
        - image: quay.io/cloudminds/dagger-alertmanager:latest
          name: dagger-alertmanager
          ports:
            - containerPort: 9093
          resources:
            limits:
              cpu: "2"
              memory: 4Gi
            requests:
              cpu: 500m
              memory: 256Mi
          volumeMounts:
            - mountPath: /etc/alertmanager
              name: alertmanager-conf
      restartPolicy: Always
      volumes:
        - name: alertmanager-conf
          persistentVolumeClaim:
            claimName: alertmanager-conf
---
kind: Secret
apiVersion: v1
metadata:
  name: mysql-pass
data:
  mysql-pass: MTIzNDU2
type: Opaque

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: dagger-mysql
  name: dagger-mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dagger-mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: dagger-mysql
    spec:
      containers:
        - image: quay.io/cloudminds/dagger-mysql:latest
          name: dagger-mysql
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-pass
                  key: mysql-pass
            - name: MYSQL_DATABASE
              value: log
          ports:
            - containerPort: 3306
          resources:
            limits:
              cpu: "2"
              memory: 4Gi
            requests:
              cpu: 500m
              memory: 256Mi
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: mysql-data
      restartPolicy: Always
      volumes:
        - name: mysql-data
          persistentVolumeClaim:
            claimName: mysql-data
